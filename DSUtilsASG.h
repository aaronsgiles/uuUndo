#pragma once#ifndef __DSUTILSASG__#define __DSUTILSASG__#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endiftypedef struct Prefs {	short version;	char trashSource;	Boolean makeComments;	Point progressLoc;	Point prefsLoc;} Prefs, *PrefsPtr, **PrefsHandle;#if defined(powerc) || defined(__powerc)#pragma options align=reset#endifextern PrefsHandle gPrefs;extern Handle gMapResource;enum {	kCreator = 'uuUN',	kVersion = 0x0100};enum {	kDontTrashSource,	kTrashSource,	kDeleteSource};enum {	rProgressDialog = 137,	kProgressDialogID = 'Jpgd',		progressText1 = 1,		progressUser,		progressCancel,		progressText2,	codecProgressForceUpdatePercent = -125};extern pascal OSErr GenericProgress(short theMessage, Fixed thePercent, long refCon);extern Boolean CheckAbort();extern Boolean GiveTime();extern Boolean HandleAbortMouseDown(EventRecord *theEvent);extern Boolean HandleAbortKeyDown(EventRecord *theEvent);extern pascal void UpdateBar(DialogPtr theDialog, short theItem);extern void SetItemHandle(DialogPtr theDialog, short theItem, Handle newHandle);extern Handle GetItemHandle(DialogPtr theDialog, short theItem);extern void UpdateDialogItem(DialogPtr theDialog, short theItem);extern void HiliteDControl(DialogPtr theDialog, short theItem, short theVal);extern FSSpec *GetPrefsSpec(void);extern OSErr SaveHandleAsResource(short theFile, OSType type, short index, Handle theHandle, short *id);extern OSErr SaveHandleAsResource(FSSpec *file, OSType fileType, OSType type, short index, Handle theHandle, short *id);extern OSErr LoadHandleFromResource(short theFile, OSType type, short index, Handle *theHandle);extern OSErr LoadHandleFromResource(FSSpec *file, OSType type, short index, Handle *theHandle);extern OSErr SavePrefsHandle(OSType type, short index, Handle theHandle, short *id = nil);extern OSErr LoadPrefsHandle(OSType type, short index, Handle *theHandle);extern void LoadPrefs(void);extern void SavePrefs(void);extern void SetWindowPosition(WindowPtr theWindow, Point thePosition);extern void GetWindowPosition(WindowPtr theWindow, Point *thePosition);extern void ForceFolderUpdate(long dirID, short vRefNum);#endif